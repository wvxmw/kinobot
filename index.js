const { Telegraf, Markup } = require("telegraf");
const films = require("./films");
const fs = require("fs");
const refLink = "https://kurl.ru/ASKye";
require("dotenv").config();

const bot = new Telegraf(process.env.BOT_TOKEN);
bot.start(async (ctx) => {
   await ctx.replyWithHTML(
      "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n–ù–∞–ø–∏—à–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ –∏ —è –ø—Ä–∏—à–ª—é –Ω–∞–∑–≤–∞–Ω–∏–µ"
   );
   const chatId = ctx.message.chat.id;
   const path = "chat_ids.json";
   const data = JSON.parse(fs.readFileSync(path, { encoding: "utf8" }));
   if (!(chatId in data)) {
      data[chatId] = chatId;
      fs.writeFileSync(path, JSON.stringify(data), {
         encoding: "utf8",
         flag: "w",
      });
   }
});
bot.help(
   async (ctx) => await ctx.reply("–ù–∞–ø–∏—à–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ –∏ —è –ø—Ä–∏—à–ª—é –Ω–∞–∑–≤–∞–Ω–∏–µ")
);

bot.on("message", async (ctx) => {
   if (!ctx.message.text) await ctx.reply("–ü—Ä–∏—à–ª–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞");
   else {
      if (ctx.message.text.trim() === "/bonus") {
         await ctx.replyWithPhoto(
            {
               source: "./img/bonus.png",
            },
            {
               ...Markup.inlineKeyboard([
                  [Markup.button.url("–ü–û–õ–£–ß–ò–¢–¨ –ë–û–ù–£–° + 500% üöÄ", refLink)],
               ]),
               disable_web_page_preview: true,
            }
         );
      } else if (ctx.message.text.trim() === "/tutorial") {
         await sendTutorial(ctx);
      } else {
         const id = +ctx.message.text.trim();
         if (id in films) {
            await ctx.replyWithPhoto(
               {
                  source: "./img/bonus.png",
               },
               {
                  caption: `üé¨ <b>${films[id].type}: ${films[id].name}</b>\n\n–î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ –≤ –æ—Ç–ª–∏—á–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ <b><a href="${refLink}">—Å—Å—ã–ª–∫–µ</a></b> –∏–ª–∏ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n\n–ê —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üîî`,
                  parse_mode: "HTML",
                  ...Markup.inlineKeyboard([
                     [
                        Markup.button.url(
                           `–°–ú–û–¢–†–ï–¢–¨ ${
                              films[id].type.toUpperCase()
                           } üé¨`,
                           refLink
                        ),
                     ],
                     [Markup.button.url("–ü–û–õ–£–ß–ò–¢–¨ –ë–û–ù–£–° + 500% üöÄ", refLink)],
                     [
                        Markup.button.callback(
                           "–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ü–†–û–°–ú–û–¢–†–£ ‚öôÔ∏è",
                           "btn_tutorial"
                        ),
                     ],
                  ]),
                  disable_web_page_preview: true,
               }
            );
         } else {
            await ctx.reply(
               "–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑"
            );
         }
      }
   }
});
bot.action("btn_tutorial", async (ctx) => {
   await sendTutorial(ctx, true);
});
bot.launch();

async function sendTutorial(ctx, isButton = false) {
   await ctx.replyWithVideo(
      {
         source: "./video/tutorial.mp4",
      },
      {
         ...Markup.inlineKeyboard([
            [Markup.button.url(`–°–ú–û–¢–†–ï–¢–¨ –§–ò–õ–¨–ú–´ üé¨`, refLink)],
         ]),
         disable_web_page_preview: true,
      }
   );
   if (isButton) await ctx.answerCbQuery();
}
// Enable graceful stop
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
